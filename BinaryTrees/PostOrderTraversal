//Recursive

class Solution {
    public List<Integer> postorderTraversal(TreeNode root) {
        List<Integer> ans = new ArrayList<>();
        postorder(root,ans);
        return ans;
    }
    public void postorder(TreeNode root,List<Integer> l){
        if(root ==null){
            return;
        }
        postorder(root.left,l);
        postorder(root.right,l);
        l.add(root.val);
    }
}

//Iterative

class Solution {
    public List<Integer> postorderTraversal(TreeNode root) {
        Stack<TreeNode> s1 = new Stack<>();
        Stack<TreeNode> s2 = new Stack<>();
        List<Integer> ans = new ArrayList<>();
        if(root == null){
            return ans;
        }
        s1.push(root);
        while(!s1.isEmpty()){
            TreeNode x  = s1.pop();
            s2.push(x);
            if(x.left!=null) s1.push(x.left);
            if(x.right!=null) s1.push(x.right);
        }
        while(!s2.isEmpty()){
            ans.add(s2.pop().val);
        }
        return ans;
    }
}
