//Recusive

class Solution {
    List<Integer> l = new ArrayList<>();
    public List<Integer> preorderTraversal(TreeNode root) {
        List<Integer> l = new ArrayList<>();
        preorder(root,l);
        return l;
    }
    public void preorder(TreeNode root,List<Integer> l){
        if(root!=null){
            l.add(root.val);
            preorder(root.left,l);
            preorder(root.right,l);
        }
    }
}

//Iterative

class Solution {
    public List<Integer> preorderTraversal(TreeNode root) {
        Stack<TreeNode> st = new Stack<>(); 
        List<Integer> l = new ArrayList<>();
        if(root == null){
            return l;
        }
       
        st.add(root);
        while(!st.isEmpty()){
            TreeNode x = st.pop();
            l.add(x.val);
            if(x.right!=null) st.push(x.right);
            if(x.left!=null) st.push(x.left);
        }
        return l;
    }
}
